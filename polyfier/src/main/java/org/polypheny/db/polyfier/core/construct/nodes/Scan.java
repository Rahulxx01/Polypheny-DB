/*
 * Copyright 2019-2023 The Polypheny Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.polypheny.db.polyfier.core.construct.nodes;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;
import org.polypheny.db.polyfier.core.construct.model.ColumnStatistic;
import org.polypheny.db.polyfier.core.construct.model.Result;
import org.polypheny.db.catalog.entity.CatalogTable;

import java.util.HashMap;

@Getter
@Setter(AccessLevel.PROTECTED)
public class Scan extends Node {
    static int idx = 0;

    private long tableId;
    private String tableName;

    protected Scan() {
        super( idx++ );
    }

    /**
     * Scans a Table, converting the underlying structure into a Result.
     * The root of the tree generated by a Scan is the Scan itself.
     * The Scan is not counted in either height or the number of Nodes.
     * @param table     Table
     * @return          Scan
     */
    public static Scan scan(CatalogTable table ) {
        Scan scan = new Scan();

        scan.setOperatorType( OperatorType.SCAN );

        scan.setTableId( table.id );
        scan.setTableName( table.getSchema().getName() + "." + table.name );
        scan.setResult( Result.from( scan, table ) );
        scan.setOperatorType( OperatorType.SCAN );
        return scan;
    }

    public Scan setStats( HashMap<String, ColumnStatistic> columnStatistics ) {
        getResult().getColumns().forEach( column -> {
            ColumnStatistic columnStatistic = columnStatistics.get( column.nSplit( 1 ) );
            column.setColumnStatistic( ColumnStatistic.copy( columnStatistic ) );
        });
        return this;
    }


}
