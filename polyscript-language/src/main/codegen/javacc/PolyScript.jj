// Parser specification
options {
    STATIC = false ;
    LOOKAHEAD = 3;
}
PARSER_BEGIN(PolyScript)
package org.polypheny.db.polyscript.parser;

import java.util.List;
import java.util.ArrayList;
import org.polypheny.db.languages.polyscript.Script;
import org.polypheny.db.languages.polyscript.Expression;
import org.polypheny.db.languages.polyscript.SqlExpression;
import org.polypheny.db.languages.polyscript.CqlExpression;
import org.polypheny.db.languages.polyscript.MqlExpression;

public class PolyScript {
    public static void main( String[] args ) throws ParseException, TokenMgrError {
        PolyScript parser = new PolyScript( System.in ) ;
        Script result = parser.Start() ;
        System.out.println(String.format("parsed query: %s", result));
    }
}

PARSER_END(PolyScript)

// Lexical analyzer specification
SKIP : { "\n" | "\r" | "\r\n" }
TOKEN : { < SQL : "sql(" > }
TOKEN : { < MQL : "mql(" > }
TOKEN : { < CQL : "cql(" > }
TOKEN : { < PY : "py(" > }
TOKEN : { < LPAREN : "(" > }
TOKEN : { < RPAREN : ")" > }
TOKEN : { < SEMICOLON : ";" > }
TOKEN : { < COMMIT : "commit" > }
TOKEN : { < RETURN : "return" > }

TOKEN : { < STRING : (["0"-"9", "a"-"z", "A"-"Z", "*", "'", " ", ".", "{", "}", "[", "]", ":"])+ > }
TOKEN : { < PAREN_STRING : (<LPAREN><STRING><RPAREN>) > }

Script Start() : {
 List<Expression> expressions = new ArrayList<Expression>();
 Expression expression;
  }
{
    (<SQL>expression = sqlExpression() {expressions.add(expression);}<RPAREN>
    <SEMICOLON>
    |
    <MQL> expression = mqlExpression() {expressions.add(expression);}<RPAREN>
    <SEMICOLON>
    |
    <CQL> expression = cqlExpression() {expressions.add(expression);}<RPAREN>
    <SEMICOLON>)+
    {
    return new Script(expressions);
}
}

Expression sqlExpression():
{
    Token t1;
    Token t2;
    Token t3;
    Token t4;
}
{
    t1 = <STRING> t2=<PAREN_STRING> t3=<STRING> t4=<PAREN_STRING>  { return new SqlExpression(t1.image + t2.image + t3.image + t4.image); }
    |
    t1 = <STRING> { return new SqlExpression(t1.image + t2.image); }
    |
    t1 = <STRING> { return new SqlExpression(t1.image); }
}

Expression mqlExpression():
{
    Token t1;
    Token t2;
    Token t3;
    Token t4;
}
{
    t1 = <STRING> t2=<PAREN_STRING> t3=<STRING> t4=<PAREN_STRING>  { return new MqlExpression(t1.image + t2.image + t3.image + t4.image); }
    |
    t1 = <STRING> t2=<PAREN_STRING>  { return new MqlExpression(t1.image + t2.image); }
    |
    t1 = <STRING> { return new MqlExpression(t1.image); }
}

Expression cqlExpression():
{
    Token t1;
    Token t2;
    Token t3;
    Token t4;
}
{
    t1 = <STRING> t2=<PAREN_STRING> t3=<STRING> t4=<PAREN_STRING> {  return new CqlExpression(t1.image + t2.image + t3.image + t4.image); }
    |
    t1 = <STRING> t2=<PAREN_STRING>  { return new CqlExpression(t1.image + t2.image); }
    |
    t1 = <STRING> { return new CqlExpression(t1.image); }
}

