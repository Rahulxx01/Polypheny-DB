/*
 * Copyright 2019-2022 The Polypheny Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.polypheny.db.processing;

import org.polypheny.db.PolyResult;
import org.polypheny.db.languages.polyscript.*;
import org.polypheny.db.polyscript.parser.ParseException;
import org.polypheny.db.polyscript.parser.PolyScript;
import org.polypheny.db.transaction.Transaction;
import org.polypheny.db.transaction.TransactionException;

import java.io.StringReader;
import java.util.stream.Collectors;

public class PolyScriptInterpreter implements ScriptInterpreter {

    private final SqlProcessorFacade sqlProcessorFacade;

    private final Transaction transaction;

    public PolyScriptInterpreter(SqlProcessorFacade sqlFacade, Transaction transaction) {
        this.sqlProcessorFacade = sqlFacade;
        this.transaction = transaction;
    }

    @Override
    public PolyResult interprete(String script) {
        Script parsed;
        try {
            if (wrappedWithQuotes(script)) {
                parsed = new PolyScript(new StringReader(removeWrappingQuotes(script))).Start();
            } else {
                parsed = new PolyScript(new StringReader(script)).Start();
            }
        } catch (ParseException e) {
            throw new RuntimeException(e);
        }
        PolyResult result = null;
        // TODO: Not pretty
        for (Expression expression : parsed.stream().collect(Collectors.toList())) {
            result = run(expression); // return result of last executed query
        }
        try {
            transaction.commit();
        } catch (TransactionException e) {
            throw new RuntimeException(e);
        }
        return result;
    }

    private boolean wrappedWithQuotes(String script) {
        return firstCharacterIsQuote(script) && lastCharacterIsQuote(script);
    }

    private boolean firstCharacterIsQuote(String script) {
        return script.startsWith("'");
    }

    private boolean lastCharacterIsQuote(String script) {
        return script.lastIndexOf("'") == script.length() - 1;
    }

    private String removeWrappingQuotes(String script) {
        return script.substring(1, script.length() - 1);
    }

    private PolyResult run(Expression expression) {
        if (expression instanceof SqlExpression) {
            return process((SqlExpression) expression);
        } else if (expression instanceof MqlExpression) {
            return process((MqlExpression) expression);
        } else if (expression instanceof CqlExpression) {
            return process((CqlExpression) expression);
        } else {
            throw new UnsupportedOperationException(
                    String.format("The provided language %s isn't supported by the Interpreter",
                            expression.getClass().getName())
            );
        }
    }

    private PolyResult process(SqlExpression line) {
        return sqlProcessorFacade.runSql(line.getValue(), transaction);
    }

    private PolyResult process(MqlExpression line) {
//        MqlProcessorImpl mqlProcessor = new MqlProcessorImpl();
//        String database = transaction.getDefaultSchema().getDatabaseName();
//        QueryParameters parameters = new MqlQueryParameters( line.getValue(), database, Catalog.SchemaType.DOCUMENT );
//        MqlNode parsed = (MqlNode) mqlProcessor.parse( line.getValue() );
//        boolean noLimit = false;
//        if ( parsed instanceof MqlUseDatabase) {
//            database = ((MqlUseDatabase) parsed).getDatabase();
//            //continue;
//        }
//
//        if ( parsed instanceof MqlCollectionStatement && ((MqlCollectionStatement) parsed).getLimit() != null ) {
//            noLimit = true;
//        }
//
//        Statement statement = transaction.createStatement();
//        if ( parsed.getFamily() == Mql.Family.DML && mqlProcessor.needsDdlGeneration( parsed, parameters ) ) {
//            mqlProcessor.autoGenerateDDL(
//                    statement,
//                    parsed,
//                    parameters );
//        }
//
//        PolyResult polyResult = new PolyResult();
//        if ( parsed.getFamily() == Mql.Family.DDL ) {
//            mqlProcessor.prepareDdl( statement, parsed, parameters );
//            Result result = new Result( 1 ).setGeneratedQuery( query ).setXid( transaction.getXid().toString() );
//            results.add( result );
//        } else {
//            if ( transaction.isAnalyze() ) {
//                statement.getOverviewDuration().start( "Translation" );
//            }
//            AlgRoot logicalRoot = mqlProcessor.translate( statement, parsed, parameters );
//            if ( transaction.isAnalyze() ) {
//                statement.getOverviewDuration().stop( "Translation" );
//            }
//
//            // Prepare
//            polyResult = statement.getQueryProcessor().prepareQuery( logicalRoot, true );
//
//            if ( transaction.isAnalyze() ) {
//                statement.getOverviewDuration().start( "Execution" );
//            }
//            results.add( getResult( Catalog.QueryLanguage.MONGO_QL, statement, request, query, polyResult, noLimit ) );
//            if ( transaction.isAnalyze() ) {
//                statement.getOverviewDuration().stop( "Execution" );
//            }
//
//            // Add statistic information about mongo queries to monitoring.
//            PolyResult.addMonitoringInformation( statement, logicalRoot.kind.name(), statement.getDataContext().getParameterValues().size() );
//        }
        throw new UnsupportedOperationException();
    }

    private PolyResult process(CqlExpression line) {
        throw new UnsupportedOperationException();
    }


}
